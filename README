======================================
Use the repo with maven
======================================

if you want to use the jars in this repository you need to set up a profile of maven in ~/.m2/settings.xml
to do that simply copy the file in the public-mvn-repo/poms/settings.xml

======================================
Manually download of files
======================================

go to the file from github
change the url bit "blob" to "raw"

example :
from
https://github.com/novoda/public-mvn-repo/blob/master/releases/com/novoda/httpservice/core/1.2/core-1.2.jar
to
https://github.com/novoda/public-mvn-repo/raw/master/releases/com/novoda/httpservice/core/1.2/core-1.2.jar

======================================
Making releases available to others
======================================

The following steps will help you in publishing a new relase of a project onto this repo. 

***NOTE*** You will only need to do steps 1 and 2 once for your machine, 3 and 4 once for each project setup.

1: Clone this repo

2: Add this to your settings file in .m2/settings.xml, changing the <local.public.mvn.repo> to point to where you cloned this repo on your system

<profiles>
	<profile>
		<id>localrelease</id>
		<properties>
			<local.public.mvn.repo>file:/home/luigi/dev/prj/com.novoda/public-mvn-repo/releases</local.public.mvn.repo>
		</properties>
	</profile>
</profiles>


3: Add the following to the parent pom.xml of your project BUT change the github project url:

  <scm>
    <url>http://github.com/novoda/Commons/tree/${scm.branch}</url>
    <connection>scm:git:git://github.com/novoda/Commons.git</connection>
    <developerConnection>scm:git:ssh://git@github.com/novoda/Commons.git</developerConnection>
  </scm>

  <distributionManagement>
    <repository>
      <id>local-public-mvn-repo</id>
      <name>local clone of https://github.com/novoda/public-mvn-repo</name>
      <url>${local.public.mvn.repo}</url>
    </repository>
  </distributionManagement>

  <build>
    <plugins>
      <plugin>
        <artifactId>maven-scm-plugin</artifactId>
        <configuration>
          <scmVersionType>branch</scmVersionType>
          <scmVersion>${scm.branch}</scmVersion>
        </configuration>
      </plugin>
      <plugin>
        <artifactId>maven-release-plugin</artifactId>
        <configuration>
          <autoVersionSubmodules>true</autoVersionSubmodules>
          <useReleaseProfile>false</useReleaseProfile>
        </configuration>
        <goals />
      </plugin>
    </plugins>
  </build>


4: Ensure all modules in your project have their version on SNAPSHOT

5: Run this command from the root of your project BUT ensure everything is commited and pushed upstream from your local repo:

mvn release:prepare release:perform -Plocalrelease

(This will run the tests in your prject, increment the version and publish a jar in your local public-mvn-repo repo)

6: Commit and push the changes in public-mvn-repo on your machine


======================================
Manually deploy a jar in the repo
======================================

1. clone the public-maven-repo
2. run the command :

mvn deploy:deploy-file -DgroupId=com.paypal.android -DartifactId=paypal-mpl -Dversion=1.5.5.44 -Dpackaging=jar -Dfile=x/PayPal_MPL.jar -Durl=file://x/public-mvn-repo/releases/

3. push the changes

